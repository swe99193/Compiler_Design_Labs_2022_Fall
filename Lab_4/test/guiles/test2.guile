(define (make-generator procedure)
  (define last-return values)
  (define last-value #f)
  (define (last-continuation _)
    (let ((result (procedure yield)))
      (last-return result)))
  (define (yield value)
    (call/cc (lambda (continuation)
               (set! last-value value)
               (last-return value))))
  (lambda args
    (call/cc (lambda (return)
               (set! last-return return)
                 (if (null? args)
                   (last-continuation last-value)
                   (apply last-continuation args))))))
(define (div x y) (if (and (exact-integer? x) (exact-integer? y)) (floor/ x y) (/ x y)))(define (pascal-display x)
  (cond ((and (not (exact-integer? x)) (real? x)) (display (exact->inexact x)))
        ((eq? x #t) (display 1))
        ((eq? x #f) (display 0))
        (#t (display x))))
(define main (lambda () (make-generator (lambda (return) (define aa 0)(define bb 0)(define cc 0) (define g (make-array 0 '(0 1) '(2 3) '(4 5) )) (define r (make-array 0 '(0 1) '(4 5) ))  (define ss (lambda () (make-generator (lambda (return) (define z 0) 0 )))) (define tt (lambda (a b  c d  ) (make-generator (lambda (return) (define z 0) (begin (set! z (+ 3 (* 4 5))) (pascal-display z) (newline) (return (+ a 5)) )))))  (begin (set! aa (- (+ aa (* 3 bb)) (div 4 2))) (pascal-display aa) (newline) (pascal-display bb) (newline) (if (<= aa bb) (begin (if (< aa 0) (begin (set! aa 333)) (begin (set! aa 111)))) (begin (set! aa 222))) (pascal-display aa) (newline) (letrec ([loop (lambda () (if (< bb 5) (begin (begin (set! aa 0) (letrec ([loop (lambda () (if (< aa 5) (begin (begin (set! aa (+ aa 1)) ) (loop))))]) (loop)) (set! bb (+ bb 1)) (pascal-display bb) (newline) ) (loop))))]) (loop)) (array-cell-set! g (+ (+ aa (array-cell-ref r 1 4 )) ((tt 2 3 (exact->inexact 4) (exact->inexact 6.5) ))) 0 3 4 ) (pascal-display (array-cell-ref g 0 3 4 )) (newline) )))))

((main))
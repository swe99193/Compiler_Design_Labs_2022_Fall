(define (make-generator procedure)
  (define last-return values)
  (define last-value #f)
  (define (last-continuation _)
    (let ((result (procedure yield)))
      (last-return result)))
  (define (yield value)
    (call/cc (lambda (continuation)
               (set! last-value value)
               (last-return value))))
  (lambda args
    (call/cc (lambda (return)
               (set! last-return return)
                 (if (null? args)
                   (last-continuation last-value)
                   (apply last-continuation args))))))
(define (div x y) (if (and (exact-integer? x) (exact-integer? y)) (floor/ x y) (/ x y)))(define (pascal-display x)
  (cond ((and (not (exact-integer? x)) (real? x)) (display (exact->inexact x)))
        ((eq? x #t) (display 1))
        ((eq? x #f) (display 0))
        (#t (display x))))
(define main (lambda () (make-generator (lambda (return) (define a 0)(define b 0)  (define comb (lambda (a b  ) (make-generator (lambda (return) (begin (if (> a b) (begin (if (eq? a 1) (begin (return 1)) (begin (if (> a 0) (begin (if (> b 0) (begin (return (+ ((comb (- a 1) (- b 1) )) ((comb (- a 1) b ))))) (begin (return 1)))) (begin (return 0)))))) (begin (return 1))) )))))  (begin (set! a 3) (set! b 4) (pascal-display ((comb (+ a 3) (- b 2) ))) (newline) )))))

((main))